"use client";

import { useEffect, useMemo, useState } from "react";
import { useConvex, useMutation, useQuery } from "convex/react";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { slugify } from "@/lib/utils";
import { toast } from "sonner";
import { RESOURCES_MAP, apiOf, type FieldConfig } from "@/config/resources";
import { useRouter } from "next/navigation";
import { ImagePreviewThumb } from "./ImagePreviewThumb";
import RichTextEditor from "./RichTextEditor";

const SETTINGS_SELECTS: Record<string, { label: string; value: string }[]> = {
  type: [
    { label: "string", value: "string" },
    { label: "number", value: "number" },
    { label: "boolean", value: "boolean" },
    { label: "json", value: "json" },
    { label: "url", value: "url" },
    { label: "email", value: "email" },
    { label: "phone", value: "phone" },
    { label: "color", value: "color" },
    { label: "imageId", value: "imageId" },
    { label: "richtext", value: "richtext" },
  ],
  group: [
    { label: "site", value: "site" },
    { label: "seo", value: "seo" },
    { label: "social", value: "social" },
    { label: "ui", value: "ui" },
    { label: "feature", value: "feature" },
    { label: "contact", value: "contact" },
  ],
};

const SETTINGS_HELP: Record<string, string> = {
  key: "Định danh duy nhất (nên dạng namespace.key). Dùng để đọc ở frontend.",
  value: "Giá trị chính. Với kiểu phức tạp có thể nhập JSON.",
  group: "Nhóm/namespace của cấu hình (site, seo, social, ui, feature, contact).",
  label: "Tên hiển thị trong trang quản trị để người dùng dễ hiểu.",
  description: "Ghi chú/giải thích ngắn mục đích cấu hình.",
  type: "Kiểu dữ liệu của Value để parse đúng.",
};

function exampleForKeyByGroup(group?: string) {
  switch ((group ?? "").toLowerCase()) {
    case "seo":
      return "seo.defaultTitle";
    case "social":
      return "social.facebook";
    case "ui":
      return "ui.primaryColor";
    case "feature":
      return "feature.enableWishlist";
    case "contact":
      return "contact.phone";
    case "site":
    default:
      return "site.name";
  }
}

function exampleForValueByType(type?: string) {
  switch ((type ?? "string").toLowerCase()) {
    case "number":
      return "42";
    case "boolean":
      return "true";
    case "json":
      return '{"en":"Title","vi":"Tiêu đề"}';
    case "url":
      return "https://example.com";
    case "email":
      return "hello@example.com";
    case "phone":
      return "0909123456";
    case "color":
      return "#0ea5e9";
    case "imageId":
      return "<id_ảnh_từ_Images>";
    case "richtext":
      return "<p>Nội dung...</p>";
    case "string":
    default:
      return "Công ty ABC";
  }
}

const SETTINGS_EXAMPLE: Record<string, (form: Record<string, any>) => string | undefined> = {
  key: (form) => exampleForKeyByGroup(form.group),
  value: (form) => exampleForValueByType(form.type),
  group: () => "site",
  label: (form) => (form.group === "seo" ? "Tiêu đề mặc định" : "Tên website"),
  description: (form) => (form.group === "seo" ? "Dùng cho thẻ title" : "Hiển thị ở header"),
  type: (form) => (form.key?.endsWith("Color") ? "color" : "string"),
};

type Props = {
  resource: string;
  id?: string; // nếu có là edit form
};

export default function ResourceForm({ resource, id }: Props) {
  const router = useRouter();
  const config = RESOURCES_MAP[resource];
  const mod = apiOf(resource);
  const isEdit = !!id;
  let fields = (config.editFields ?? config.createFields) as FieldConfig[];
  // Với images, không yêu cầu URL, ưu tiên storageId
  if (resource === "images") {
    fields = fields.filter((f) => !["url", "size", "mimeType"].includes(f.name));
  }

  // Luôn truyền hàm query hợp lệ; dùng args = undefined để skip khi tạo mới
  const convex = useConvex();
  const [form, setForm] = useState<Record<string, any>>({});
  const [loading, setLoading] = useState<boolean>(!!id);
  // Prefetch dữ liệu khi edit bằng gọi trực tiếp qua convex.query để tránh lỗi validate args khi tạo mới
  useEffect(() => {
    if (!isEdit || !id) return;
    let mounted = true;
    convex.query(apiOf(resource).getById, { id } as any).then((doc: any) => {
      if (!mounted || !doc) return;
      const copy = { ...doc } as any;
      delete copy._id; delete copy._creationTime;
      setForm(copy);
    }).catch(() => {}).finally(() => { if (mounted) setLoading(false); });
   
