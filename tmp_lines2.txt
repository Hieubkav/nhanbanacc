1	"use client";
2	
3	import { useMemo } from "react";
4	import { useQuery } from "convex/react";
5	import { api } from "@nhanbanacc/backend/convex/_generated/api";
6	import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from "@/components/ui/dialog";
7	import { Badge } from "@/components/ui/badge";
8	import { Button } from "@/components/ui/button";
9	import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
10	import { Star, CheckCircle2, Tag, CalendarClock, Phone, Mail, Facebook, Youtube } from "lucide-react";
11	import { useEffect, useState } from "react";
12	import { StorageImage } from "@/components/shared/storage-image";
13	
14	type Kind = "product" | "post";
15	
16	function ProductDetail({ id }: { id: string }) {
17	  const data = useQuery(api.products.getById, { id: id as any });
18	  const pics = useQuery(api.product_images.listByProduct, {
19	    productId: id as any,
20	    sort: { field: "sortOrder", direction: "asc" },
21	    pageSize: 10,
22	  } as any);
23	  const variants = useQuery(api.product_variants.listByFK, {
24	    productId: id as any,
25	    sort: { field: "sortOrder", direction: "asc" },
26	    pageSize: 100,
27	  } as any);
28	  const reviews = useQuery(api.reviews.listByProduct, { productId: id as any, pageSize: 50 } as any);
29	  const category = useQuery(
30	    api.categories.getById,
31	    (data as any)?.categoryId ? ({ id: (data as any).categoryId } as any) : (undefined as any),
32	  );
33	  const title = useMemo(() => (data ? (data as any)?.name ?? "" : ""), [data]);
34	  const desc = useMemo(
35	    () => (data ? (data as any)?.shortDesc ?? (data as any)?.description ?? "" : ""),
36	    [data],
37	  );
38	  const settings = useQuery(api.settings.getOne);
39	
40	  // Hero image switching
41	  const firstHeroId = pics?.items?.[0]?.imageId ? String(pics.items[0].imageId) : undefined;
42	  const [activeImageId, setActiveImageId] = useState<string | undefined>(firstHeroId);
43	  useEffect(() => {
44	    setActiveImageId(firstHeroId);
45	  }, [firstHeroId]);
46	  // Tính giá thấp nhất và % giảm
47	  const priceStats = useMemo(() => {
48	    const vs = variants?.items ?? [];
49	    if (!vs.length) return null;
50	    const minPrice = Math.min(...vs.map((v: any) => v.price));
51	    const minOriginal = Math.min(
52	      ...vs.map((v: any) => (v.originalPrice ? v.originalPrice : Infinity)),
53	    );
54	    const hasOriginal = isFinite(minOriginal) && minOriginal > minPrice;
55	    const percent = hasOriginal ? Math.round(((minOriginal - minPrice) / minOriginal) * 100) : 0;
56	    return { minPrice, minOriginal: hasOriginal ? minOriginal : undefined, percent };
57	  }, [variants?.items]);
58	
59	  const avgRating = useMemo(() => {
60	    const rs = reviews?.items ?? [];
61	    if (!rs.length) return { avg: 0, count: 0 };
62	    const sum = rs.reduce((s: number, r: any) => s + (r.rating || 0), 0);
63	    return { avg: Math.round((sum / rs.length) * 10) / 10, count: rs.length };
64	  }, [reviews?.items]);
65	
66	  return (
67	    <>
68	      <DialogHeader>
69	        <DialogTitle className="flex items-center gap-2 text-zinc-900">
70	          {title || (data === undefined ? "Đang tải..." : "Không tìm thấy")}
71	          <Badge variant="secondary">Sản phẩm</Badge>
72	        </DialogTitle>
73	        {desc ? <DialogDescription>{desc}</DialogDescription> : null}
74	      </DialogHeader>
75	
76	      {/* Hero image */}
77	      {activeImageId ? (
78	        <div className="relative mt-2 h-56 w-full overflow-hidden rounded-xl sm:h-64 md:h-72">
79	          <StorageImage imageId={activeImageId} alt={title} />
80	          {priceStats ? (
81	            <div className="absolute bottom-2 left-2 rounded-full bg-black/60 px-3 py-1 text-xs text-white backdrop-blur">
82	              Từ {formatPrice(priceStats.minPrice)}
83	              {priceStats.minOriginal ? (
84	                <span className="ml-2 opacity-80 line-through">
85	                  {formatPrice(priceStats.minOriginal)}
86	                </span>
87	              ) : null}
88	            </div>
89	          ) : null}
90	        </div>
91	      ) : null}
92	
93	      {/* Gallery thumbnails */}
94	      {pics?.items?.length ? (
95	        <div className="mt-3 grid grid-cols-4 gap-2 sm:grid-cols-6">
96	          {pics.items.slice(0, 12).map((p: any) => {
97	            const id = String(p.imageId);
98	            const isActive = id === activeImageId;
99	            return (
100	              <button
101	                key={String(p._id)}
102	                type="button"
103	                onClick={() => setActiveImageId(id)}
104	                className={`relative h-20 w-full overflow-hidden rounded border transition-all ${isActive ? "border-2 border-gold" : "hover:border-gold/60"}`}
105	                aria-label="Xem ảnh"
106	              >
107	                <StorageImage imageId={id} alt={title} />
108	              </button>
109	            );
110	          })}
111	        </div>
112	      ) : null}
113	
114	      <div className="mt-4 flex flex-wrap items-center gap-3 text-sm text-muted-foreground">
115	        {avgRating.count ? (
116	          <span className="inline-flex items-center gap-1">
117	            <Star className="h-4 w-4 fill-yellow-400 text-yellow-400" />
118	            {avgRating.avg} ({avgRating.count})
119	          </span>
120	        ) : null}
121	        {category ? (
122	          <span className="inline-flex items-center gap-1">
123	            <Tag className="h-4 w-4" /> {category.name}
124	          </span>
125	        ) : null}
126	        {(data as any)?.status && String((data as any).status) !== "published" ? (
127	          <span className="inline-flex items-center gap-1">
128	            <Tag className="h-4 w-4" /> {(data as any).status}
129	          </span>
130	        ) : null}
131	        {(data as any)?.updatedAt ? (
132	          <span className="inline-flex items-center gap-1">
133	            <CalendarClock className="h-4 w-4" />
134	            {new Date((data as any).updatedAt).toLocaleDateString("vi-VN")}
135	          </span>
136	        ) : null}
137	      </div>
138	
139	      {/* Tabs */}
140	      <Tabs defaultValue="overview" className="mt-4">
141	        <TabsList>
142	          <TabsTrigger value="overview">Tổng quan</TabsTrigger>
143	          <TabsTrigger value="variants">Biến thể & giá</TabsTrigger>
144	          <TabsTrigger value="reviews">Đánh giá</TabsTrigger>
145	          <TabsTrigger value="images">Hình ảnh</TabsTrigger>
146	        </TabsList>
147	        <TabsContent value="overview" className="mt-3">
148	          {Array.isArray((data as any)?.features) && (data as any)!.features!.length ? (
149	            <ul className="grid list-disc gap-1 pl-5 text-sm">
150	              {(data as any).features.map((f: string, i: number) => (
151	                <li key={i}>{f}</li>
152	              ))}
153	            </ul>
154	          ) : (
155	            <p className="text-sm text-muted-foreground">Chưa có đặc điểm nổi bật.</p>
156	          )}
157	          <div className="mt-4 flex flex-wrap items-center gap-3">
158	            {settings?.phone ? (
159	              <Button variant="outline" className="rounded-full" onClick={() => window.open(`tel:${settings.phone}`, "_blank")}>
160	                <Phone className="mr-2 h-4 w-4" /> {settings.phone}
161	              </Button>
162	            ) : null}
163	            {settings?.email ? (
164	              <Button variant="outline" className="rounded-full" onClick={() => window.open(`mailto:${settings.email}`, "_blank")}>
165	                <Mail className="mr-2 h-4 w-4" /> {settings.email}
166	              </Button>
167	            ) : null}
168	            {settings?.socialFacebook ? (
169	              <Button variant="outline" className="rounded-full" onClick={() => window.open(settings.socialFacebook, "_blank")}>
170	                <Facebook className="mr-2 h-4 w-4" /> Facebook
171	              </Button>
172	            ) : null}
173	            {settings?.socialTiktok ? (
174	              <Button variant="outline" className="rounded-full" onClick={() => window.open(settings.socialTiktok, "_blank")}>
175	                {/* Simple TikTok svg icon */}
176	                <svg className="mr-2 h-4 w-4" viewBox="0 0 24 24" fill="currentColor"><path d="M19.59 6.69a4.83 4.83 0 0 1-3.77-4.25V2h-3.45v13.67a2.89 2.89 0 0 1-5.2 1.74 2.89 2.89 0 0 1 2.31-4.64 2.93 2.93 0 0 1 .88.13V9.4a6.84 6.84 0 0 0-1-.05A6.33 6.33 0 0 0 5 20.1a6.34 6.34 0 0 0 10.86-4.43v-7a8.16 8.16 0 0 0 4.77 1.52v-3.4a4.85 4.85 0 0 1-1-.1z"/></svg>
177	                TikTok
178	              </Button>
179	            ) : null}
180	            {settings?.socialYoutube ? (
181	              <Button variant="outline" className="rounded-full" onClick={() => window.open(settings.socialYoutube, "_blank")}>
182	                <Youtube className="mr-2 h-4 w-4" /> YouTube
183	              </Button>
184	            ) : null}
185	            {priceStats ? (
186	              <span className="text-sm text-muted-foreground">Giá từ {formatPrice(priceStats.minPrice)}</span>
187	            ) : null}
188	          </div>
189	        </TabsContent>
190	        <TabsContent value="variants" className="mt-3">
191	          {variants?.items?.length ? (
192	            <div className="grid gap-2">
193	              {variants.items.map((v: any) => (
194	                <div key={String(v._id)} className="flex items-start justify-between rounded-lg border p-3">
195	                  <div>
196	                    <div className="flex items-center gap-2">
197	                      <span className="font-medium">{v.name}</span>
198	                      {v.isDefault ? (
199	                        <span className="inline-flex items-center gap-1 rounded-full bg-emerald-50 px-2 py-0.5 text-xs text-emerald-700">
200	                          <CheckCircle2 className="h-3.5 w-3.5" /> Mặc định
201	                        </span>
202	                      ) : null}
203	                    </div>
204	                    {v.note ? <div className="text-xs text-muted-foreground mt-0.5">{v.note}</div> : null}
205	                  </div>
206	                  <div className="text-right">
207	                    <div className="font-semibold text-red-600">
208	                      {formatPrice(v.price)}
209	                    </div>
210	                    {v.originalPrice && v.originalPrice > v.price ? (
211	                      <div className="text-xs text-muted-foreground line-through">
212	                        {formatPrice(v.originalPrice)}
213	                      </div>
214	                    ) : null}
215	                  </div>
216	                </div>
217	              ))}
218	            </div>
219	          ) : (
220	            <p className="text-sm text-muted-foreground">Chưa có biến thể nào.</p>
221	          )}
222	        </TabsContent>
223	        <TabsContent value="reviews" className="mt-3">
224	          {reviews?.items?.length ? (
225	            <div className="grid gap-3">
226	              {(reviews.items as any[]).slice(0, 3).map((r: any) => (
227	                <div key={String(r._id)} className="rounded-lg border p-3">
228	                  <div className="mb-1 flex items-center gap-1 text-yellow-500">
229	                    {Array.from({ length: 5 }).map((_, i) => (
230	                      <Star key={i} className={`h-4 w-4 ${i < (r.rating || 0) ? "fill-yellow-400" : ""}`} />
231	                    ))}
232	                  </div>
233	                  <div className="font-medium">{r.title}</div>
234	                  <div className="text-sm text-muted-foreground">{r.content}</div>
235	                </div>
236	              ))}
237	            </div>
238	          ) : (
239	            <p className="text-sm text-muted-foreground">Chưa có đánh giá.</p>
240	          )}
241	        </TabsContent>
242	        <TabsContent value="images" className="mt-3">
243	          {pics?.items?.length ? (
244	            <div className="grid grid-cols-3 gap-2 sm:grid-cols-4">
245	              {pics.items.map((p: any) => (
246	                <div key={String(p._id)} className="relative h-24 w-full overflow-hidden rounded border">
247	                  <StorageImage imageId={String(p.imageId)} alt={title} />
248	                </div>
249	              ))}
250	            </div>
251	          ) : (
252	            <p className="text-sm text-muted-foreground">Chưa có hình ảnh.</p>
253	          )}
254	        </TabsContent>
255	      </Tabs>
256	    </>
257	  );
258	}
259	
260	function PostDetail({ id }: { id: string }) {
261	  const data = useQuery(api.posts.getById, { id: id as any });
262	  const pics = useQuery(api.post_images.listByPost, {
263	    postId: id as any,
264	    sort: { field: "sortOrder", direction: "asc" },
265	    pageSize: 12,
266	  } as any);
267	  const title = useMemo(() => (data ? (data as any)?.title ?? "" : ""), [data]);
268	  const desc = useMemo(() => (data ? (data as any)?.excerpt ?? "" : ""), [data]);
269	  const heroId = (data as any)?.thumbnailId ? String((data as any).thumbnailId) : undefined;
270	  return (
271	    <>
272	      <DialogHeader>
273	        <DialogTitle className="flex items-center gap-2 text-zinc-900">
274	          {title || (data === undefined ? "Đang tải..." : "Không tìm thấy")}
275	          <Badge variant="secondary">Bài viết</Badge>
276	        </DialogTitle>
277	        {desc ? <DialogDescription>{desc}</DialogDescription> : null}
278	      </DialogHeader>
279	      {heroId ? (
280	        <div className="relative mt-2 h-56 w-full overflow-hidden rounded-xl sm:h-64 md:h-72">
281	          <StorageImage imageId={heroId} alt={title} />
282	        </div>
283	      ) : null}
284	      <div className="mt-3 flex flex-wrap items-center gap-3 text-sm text-muted-foreground">
285	        {(data as any)?.status && String((data as any).status) !== "published" ? (
286	          <span className="inline-flex items-center gap-1">
287	            <Tag className="h-4 w-4" /> {(data as any).status}
288	          </span>
289	        ) : null}
290	        {(data as any)?.updatedAt ? (
291	          <span className="inline-flex items-center gap-1">
292	            <CalendarClock className="h-4 w-4" />
293	            {new Date((data as any).updatedAt).toLocaleDateString("vi-VN")}
294	          </span>
295	        ) : null}
296	      </div>
297	
298	      <Tabs defaultValue="content" className="mt-4">
299	        <TabsList>
300	          <TabsTrigger value="content">Nội dung</TabsTrigger>
301	          <TabsTrigger value="images">Hình ảnh</TabsTrigger>
302	          <TabsTrigger value="meta">Thông tin</TabsTrigger>
303	        </TabsList>
304	        <TabsContent value="content" className="mt-3">
305	          <div className="text-sm whitespace-pre-wrap break-words leading-relaxed">
306	            {(data as any)?.content || "Chưa có nội dung."}
307	          </div>
308	        </TabsContent>
309	        <TabsContent value="images" className="mt-3">
310	          {pics?.items?.length ? (
311	            <div className="grid grid-cols-3 gap-2 sm:grid-cols-4">
312	              {pics.items.map((p: any) => (
313	                <div key={String(p._id)} className="relative h-24 w-full overflow-hidden rounded border">
314	                  <StorageImage imageId={String(p.imageId)} alt={title} />
315	                </div>
316	              ))}
317	            </div>
318	          ) : (
319	            <p className="text-sm text-muted-foreground">Chưa có hình ảnh kèm theo.</p>
320	          )}
321	        </TabsContent>
322	        <TabsContent value="meta" className="mt-3 text-sm text-muted-foreground">
323	          <div>Cập nhật: {new Date((data as any)?.updatedAt ?? (data as any)?.createdAt ?? Date.now()).toLocaleString("vi-VN")}</div>
324	          {(data as any)?.slug ? <div>Slug: {(data as any).slug}</div> : null}
325	          {(data as any)?.status && String((data as any).status) !== "published" ? (
326	            <div>Trạng thái: {(data as any).status}</div>
327	          ) : null}
328	        </TabsContent>
329	      </Tabs>
330	    </>
331	  );
332	}
333	
334	export function EntityDetailDialog({
335	  open,
336	  onOpenChange,
337	  kind,
338	  id,
339	}: {
340	  open: boolean;
341	  onOpenChange: (o: boolean) => void;
342	  kind: Kind;
343	  id: string;
344	}) {
345	  return (
346	    <Dialog open={open} onOpenChange={onOpenChange}>
347	      <DialogContent className={kind === "post" ? "max-w-3xl" : "max-w-3xl"}>
348	        {kind === "product" ? <ProductDetail id={id} /> : <PostDetail id={id} />}
349	      </DialogContent>
350	    </Dialog>
351	  );
352	}
353	
354	function formatPrice(n: number) {
355	  return new Intl.NumberFormat("vi-VN", { style: "currency", currency: "VND" }).format(n);
356	}
